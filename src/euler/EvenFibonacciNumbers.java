package euler;

import java.util.ArrayList;

public class EvenFibonacciNumbers {

	/**
	 * Each new term in the Fibonacci sequence is generated by 
	 * adding the previous two terms. By starting with 1 and 2, 
	 * the first 10 terms will be: 
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * By considering the terms in the Fibonacci sequence whose values 
	 * do not exceed four million, find the sum of the even-valued terms.
	 */
	public static int findSumOfEvenFibonacciNumbersSimple(int maxNum)
	{
		int currentNum = 1;
		int fiboNumber = 1;
		int returnSum = 0;
		while (fiboNumber < maxNum)
		{
			fiboNumber = findSumOfEvenFibonacciNumbersSimpleHelper(currentNum);
			if (fiboNumber % 2 == 0)
			{
				if (fiboNumber < maxNum)
				{
					returnSum += fiboNumber;
				}
			}
			currentNum++;
		}
		return returnSum;
	}
	
	private static int findSumOfEvenFibonacciNumbersSimpleHelper(int maxNum)
	{
		if (maxNum == 1)
		{
			return 1;
		}
		else if (maxNum == 2)
		{
			return 2;
		}
		return findSumOfEvenFibonacciNumbersSimpleHelper(maxNum - 2) + 
				findSumOfEvenFibonacciNumbersSimpleHelper(maxNum - 1);
	}
	public static int findSumOfEvenFibonacciNumbersSieve(int maxNum)
	{
		ArrayList<Integer> evenFibonacciSieve = new ArrayList<Integer>();
		evenFibonacciSieve.add(1);
		evenFibonacciSieve.add(2);
		int currentNum = 3;
		int returnSum = 0;
		while (currentNum < maxNum)
		{
			currentNum = evenFibonacciSieve.get(evenFibonacciSieve.size() - 2) + 
					evenFibonacciSieve.get(evenFibonacciSieve.size() - 1);
			if (currentNum < maxNum)
			{
				evenFibonacciSieve.add(currentNum);
			}
		}
		for (int i : evenFibonacciSieve)
		{
			if (i % 2 == 0)
			{
				returnSum += i;
			}
		}
		return returnSum;
	}
}
